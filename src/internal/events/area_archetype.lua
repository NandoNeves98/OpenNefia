local save = require("internal.global.save")
local Feat = require("api.Feat")
local Event = require("api.Event")
local Log = require("api.Log")
local Area = require("api.Area")

local function generate_entrances_of_area_children(parent_map, params)
   local parent_area = params.area
   local floor = params.floor_number

   for _, child_area in parent_area:iter_child_areas(floor) do
      -- First check if an entrance to this area already exists in the parent
      -- area. If so, do nothing.
      local pred = function(feat)
         if not feat.area_uid then
            return false
         end

         local feat_area = Area.get(feat.area_uid)
         if not feat_area then
            return false
         end

         return feat_area._archetype == child_area._id
            and feat_area.params.area_floor == child_area.parent_area.on_floor
      end

      local exists = Feat.iter(parent_map):any(pred)
      if not exists then
         -- Generate the unique area if it hasn't been generated yet and
         -- register it if necessary.
         local area
         if Area.is_created(child_area._id) then
            area = Area.get_unique(child_area._id)
         else
            area = Area.create_unique(child_area._id, parent_area)
         end

         local entry = assert(save.base.unique_areas[child_area._id])

         -- Next check if the entrance has been autogenerated yet, and if so, do
         -- nothing. This is to support removing an autogenerated entrance after
         -- it's generated and not having it show up again.
         if not entry.entrance_was_generated then
            local x = assert(child_area.parent_area.x)
            local y = assert(child_area.parent_area.y)
            local area_floor = assert(child_area.parent_area.starting_floor)

            Log.debug("Autogenerating area entrance of '%s' (floor %d) in parent '%s' at (%d, %d)", child_area._id, area_floor, area._archetype, x, y)

            local feat, err = Area.create_entrance(area, area_floor, x, y, {}, parent_map)
            if feat then
               entry.entrance_was_generated = true
            else
               Log.error("Failed to place map entrance of '%s': %s'", child_area._id, err)
            end
         end
      end
   end
end

Event.register("base.on_generate_area_floor", "Generate entrances for the areas contained in the area", generate_entrances_of_area_children)
